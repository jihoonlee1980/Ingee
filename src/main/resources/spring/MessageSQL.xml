<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com2">
	<select id="getRecvMessageCount" parameterType="HashMap" resultType="int">
		select count(*) from message msg		
		where
		<choose>
			<when test="keyword!=null and !keyword.equals('')">
				<if test="searchType=='content'">
					msg.content like CONCAT('%',#{keyword},'%') and
					<choose>             
	             		<when test="DISC == 'recv'">
	             			msg.receiver = #{id}
	             		</when>
	             		<otherwise>
	             			msg.sender = #{id}
	             		</otherwise>
	             	</choose>					 
				</if>
				<if test="searchType=='subject'">
					msg.subject like CONCAT('%',#{keyword},'%') and
					<choose>             
	             		<when test="DISC == 'recv'">
	             			msg.receiver = #{id}
	             		</when>
	             		<otherwise>
	             			msg.sender = #{id}
	             		</otherwise>
	             	</choose>
				</if>
				<if test="searchType=='sender'">
					msg.sender like CONCAT('%',#{keyword},'%') and msg.receiver = #{id}
				</if>
				<if test="searchType=='receiver'">
					msg.receiver like CONCAT('%',#{keyword},'%') and msg.sender = #{id}
				</if>
			</when>
			<otherwise>
				<choose>             
	             <when test="DISC == 'recv'">
	                 msg.receiver
	             </when>                            
	             <otherwise>
	                 msg.sender
	             </otherwise>        
	         	</choose>
			 		= #{id}
			</otherwise>
		</choose>
	</select>
	
	<select id="getRecvMessageList" parameterType="HashMap" resultType="com.menu.model.MessageDTO">
		select msg.num , msg.sender , msg.receiver , msg.subject , msg.content ,
		msg.date_sent , msg.date_recv , msg.recv_read , m.nick sender_nick ,
		m2.nick receiver_nick , m.saved_filename sender_profile ,
		m2.saved_filename receiver_profile
		from message msg
		left outer join member m
		on msg.sender = m.id
		left outer join member m2
		on msg.receiver = m2.id
		where
		<choose>
			<when test="keyword!=null and !keyword.equals('')">
				<if test="searchType=='content'">
					msg.content like CONCAT('%',#{keyword},'%') and
					<choose>             
	             		<when test="DISC == 'recv'">
	             			msg.receiver = #{id}
	             		</when>
	             		<otherwise>
	             			msg.sender = #{id}
	             		</otherwise>
	             	</choose>					 
				</if>
				<if test="searchType=='subject'">
					msg.subject like CONCAT('%',#{keyword},'%') and
					<choose>             
	             		<when test="DISC == 'recv'">
	             			msg.receiver = #{id}
	             		</when>
	             		<otherwise>
	             			msg.sender = #{id}
	             		</otherwise>
	             	</choose>
				</if>
				<if test="searchType=='sender'">
					msg.sender like CONCAT('%',#{keyword},'%') and msg.receiver = #{id}
				</if>
				<if test="searchType=='receiver'">
					msg.receiver like CONCAT('%',#{keyword},'%') and msg.sender = #{id}
				</if>
			</when>
			<otherwise>
				<choose>             
	             <when test="DISC == 'recv'">
	                 msg.receiver
	             </when>                            
	             <otherwise>
	                 msg.sender
	             </otherwise>        
	         	</choose>
			 		= #{id}
			</otherwise>
		</choose>			
		 order by msg.date_sent desc limit #{startPage} , #{perPage}
	</select>
	
	<select id="getMessageContent" parameterType="int" resultType="HashMap">
		select * from message where num = #{num}
	</select>
	
	<select id="messageIdcheck" parameterType="String" resultType="String">
		select id from member where id = #{id}
	</select>
	
	<insert id="sendMessage" parameterType="HashMap">
		<selectKey keyProperty="no" resultType="java.lang.Integer">
		SELECT @@IDENTITY AS no
		</selectKey>
		insert into message values (
		null ,
		#{sender} ,
		#{receiver} ,
		#{subject} ,
		#{content} ,
		now() ,
		null ,
		0
		);
	</insert>
	
	<delete id="deleteMessage" parameterType="HashMap">
		delete from message where num  in 
		<foreach collection="arrData" item="item" index="index" separator="," open="(" close=")">
		    ${arrData[index]}
		</foreach>
	</delete>
	
	<delete id="withdrawalDelete" parameterType="String">
		delete from message where sender = (select id from member where nick = #{nick}) or receiver = (select id from member where nick = #{nick})
	</delete>
</mapper>